==================================================
Mettre à niveau depuis openMairie 4.2.0 vers 4.3.0
==================================================

Cette procédure permet de mettre à niveau une application utilisant openMairie
version 4.2.0 vers openMairie 4.3.0.

Pour conserver une application fonctionnelle tout au long de la mise à niveau,
il est vivement conseillé de:

- suivre les étapes de cette procédure dans l'ordre;
- ne pas utiliser le générateur lorsque ce n'est pas indiqué.

**Consultez la section sur les erreurs connues si des erreurs persistent après
la mise à niveau.**

Étape 1: mettre à jour les surcharges du framework
==================================================

Classe ``application``
----------------------

Supprimer l'utilisation de l'attribut:

.. code-block:: php

   <?php

   var $permission_if_right_does_not_exist = true;

   ?>

S'il est utilisé dans une surchage, il doit être remplacée par:

.. code-block:: php

   <?php

   $this->config['permission_if_right_does_not_exist'];

   ?>

Les méthodes surchargés de la classe ``om_application`` doivent être mises à
jour avec leur nouvelle implémentation.


Classe ``dbForm``
-----------------

Les méthodes surchargés de la classe ``dbForm`` doivent être mises à jour avec
leur nouvelle implémentation.

Classe ``formulaire``
---------------------

Les méthodes surchargés de la classe ``formulaire`` doivent être mises à jour
avec leur nouvelle implémentation.

Classe ``table``
-----------------

Les méthodes surchargés de la classe ``table`` doivent être mises à jour avec
leur nouvelle implémentation.

Supprimer l'utilisation de la méthode:

.. code-block:: php

   <?php

   function countHrefColumns($href = array())

   ?>

Si elle est utilisée dans une surchage, elle doit être remplacée par:

.. code-block:: php

   <?php

   function countActions($actions)

   ?>

Étape 2: mettre à jour la base de données
=========================================

La structure
------------

La structure de la base de données d'openMairie a changée sensiblement depuis la
version 4.2.0. Pour mettre à jour la base de données depuis cette version il
faudra exécuter le script SQL ``ver_4.3.0.sql``.

Pour MySQL: ::

/data/mysql/ver_4.3.0.sql

Pour PostgresSQL: ::

/data/pgsql/ver_4.3.0.sql

Les tables métier
-----------------

Le générateur gère maintenant plusieurs contraintes:

- ``PRIMARY KEY``
- ``FOREIGN KEY``
- ``UNIQUE``
- ``NOT NULL``

En fonction de ces contraintes les fichiers de l'application sont générés
différemment par rapport à openMairie version 4.2.0.

``PRIMARY KEY``
...............

**Ajouter la contrainte SQL PRIMARY KEY.**

Le générateur peut maintenant utiliser les clés primaires. Pour créer le champ
identifiant, il faudra utiliser la contrainte ``PRIMARY KEY`` à la place des
noms de table en tant que nom de colonne.

``FOREIGN KEY (PostgresSQL)``
.............................

**Ajouter la contrainte SQL FOREING KEY.**

Le générateur gère également les clés étrangères des bases PostgresSQL. Pour
créer des références, il faudra utiliser la contrainte ``FOREIGN KEY`` à la
place des noms de table étrangères en tant que nom de colonne.

``UNIQUE``
..........

- **Ajouter la contrainte SQL UNIQUE.**
- **Mettre a jour les fichiers de surcharge du répertoire obj/.**

La contrainte ``UNIQUE`` permet maintenant de gérer automatiquement les champs
uniques. Il n'est plus nécessaire de surcharger la méthode ``verifier`` des
modèles pour gérer ce type de champ. Il faudra nettoyer les surcharges de
``verifier`` en supprimant la vérification manuelle des champs requis et les
remplacer par des contraintes ``UNIQUE`` dans la base de données.

``NOT NULL``
............

- **Ajouter la contrainte NOT NULL aux champs requis.**
- **Supprimer la clause DEFAULT des champs requis.**
- **Supprimer la contrainte NOT NULL des champs non-requis ou ajouter la clause
  DEFAULT en fonction du besoin.**
- **Mettre a jour les fichiers de surcharge du répertoire obj/.**

Toutes les colonnes ``NOT NULL`` généreront des champs requis. Des champs
qui n'étaient pas requis dans la version 4.2.0 peuvent donc l'être dans la
version 4.3.0 après une génération. Il faut donc supprimer la contrainte
``NOT NULL`` des colonnes qui ne sont pas réellement requises par l'application
ou ajouter une valeur par defaut avec la clause ``DEFAULT``.

Concernant les champs requis par l'application. Il n'est plus nécessaire de
surcharger la méthode ``verifier`` des modèles pour gérer ce type de champ. Il
faudra nettoyer les surcharges de ``verifier`` en supprimant la vérification
manuelle des champs requis et les remplacer par des contraintes ``NOT NULL``
sans clause ``DEFAULT`` dans la base de données.

Étape 3: mettre à jour les fichiers de surcharge du répertoire sql/
===================================================================

- **Prefixer le nom des colonnes étrangères par l'alias généré dans gen/sql/.**

Le générateur donne à chaque table étrangère un alias unique, ce qui permet
d'effectuer plusieurs jointures sur une même table sans avoir d'erreur
d'ambiguïté avec les nom des colonnes. Pour cela, dans les fichiers du
répertoire ``sql/``, les noms des colonnes provenant de tables étrangères
devront être préfixés par l'alias de leur table. Cet alias apparaît dans la
définition de la variable ``$table`` dans les fichiers générés du répertoire
``gen/sql/``.

Les erreurs connues
===================
