==================================================
Mettre à niveau depuis openMairie 4.2.0 vers 4.3.0
==================================================

Les surcharges du framework
===========================

Classe ``application``
----------------------

Les attributs
.............

L'attribut suivant n'existe plus:

.. code-block:: php

   <?php
       var $permission_if_right_does_not_exist = true;
   ?>

Remplacée par:

.. code-block:: php

   <?php
       $this->config['permission_if_right_does_not_exist'];
   ?>

Les méthodes
............

Les méthode surchargés de la classe ``om_application`` doivent être mises à jour
avec leur nouvelle implémentation.

Voici la liste des méthodes ayant évoluées depuis la vers 4.2.0:

- __construct
- checkParams
- isAuthorized
- isAccredited
- isAuthenticated
- displayActions
- displayActionLogin
- displayShortlink
- displayMenu
- displayStartContent
- displayFooter
- initSynchronization
- synchronizeUser
- getValFUserToAdd

Classe ``dbForm``
-----------------

Les méthode surchargés de la classe ``dbForm`` doivent être mises à jour avec
leur nouvelle implémentation.

Voici la liste des méthodes ayant évoluées depuis la vers 4.2.0:

- constructeur
- verifier
- formulaire
- sousformulaire
- retour
- retoursousformulaire
- getDataSubmit
- addToMessage

Classe ``formulaire``
---------------------

Les méthode surchargés de la classe ``formulaire`` doivent être mises à jour
avec leur nouvelle implémentation.

Voici la liste des méthodes ayant évoluées depuis la vers 4.2.0:

- formulaire
- entete
- afficher
- enpied
- afficherChamp
- debutFieldset
- finFieldset
- debutBloc
- finBloc
- hiddenstatic
- hiddenstaticnum
- textareahiddenstatic
- hiddenstaticdate
- datestatic
- statiq
- textarea
- textareastatic
- pagehtml
- textareamulti
- date
- select
- selectdisabled
- text
- hidden
- password
- textdisabled
- textreadonly
- checkbox
- checkboxnum
- comboG
- comboG2
- comboD
- comboD2
- comboC
- upload
- upload2
- voir
- voir2
- localisation
- localisation2
- rvb
- rvb2
- setGroupe
- setRegroupe

Classe ``logger``
-----------------

Les méthode surchargés de la classe ``logger`` doivent être mises à jour avec
leur nouvelle implémentation.

Voici la liste des méthodes ayant évoluées depuis la vers 4.2.0:

- displayLog

Classe ``table``
-----------------

Les méthode surchargés de la classe ``table`` doivent être mises à jour avec
leur nouvelle implémentation.

Voici la liste des méthodes ayant évoluées depuis la vers 4.2.0:

- __construct
- display
- displayHeader
- composeSearchTab
- displaySearch
- composeQuery

La méthode suivante n'existe plus:  

.. code-block:: php

   <?php
       function countHrefColumns($href = array())
   ?>

Remplacée par:

.. code-block:: php

   <?php
       function countActions($actions)
   ?>

La base de données
==================

La structure
------------

La structure de la base de données d'openMairie a changée sensiblement depuis la
version 4.2.0. Pour mettre à jour la base de données depuis cette version il
faudra exécuter le script SQL ``ver_4.3.0.sql``.

Pour MySQL: ::

/data/mysql/ver_4.3.0.sql

Pour PostgresSQL: ::

/data/pgsql/ver_4.3.0.sql

Les tables métier
-----------------

Le générateur gère maintenant plusieurs contraintes:

- ``PRIMARY KEY``
- ``FOREIGN KEY``
- ``UNIQUE``
- ``NOT NULL``

En fonction de ces contraintes les fichiers de l'application sont générés
différemment par rapport à openMairie version 4.2.0.

``PRIMARY KEY``
...............

Le générateur peut maintenant utiliser les clés primaires. Pour créer le champ
identifiant, il faudra utiliser la contrainte ``PRIMARY KEY`` à la place des
noms de table en tant que nom de colonne.

``FOREIGN KEY (PostgresSQL)``
.............................

Le générateur gère également les clés étrangères des bases PostgresSQL. Pour
créer des références, il faudra utiliser la contrainte ``FOREIGN KEY`` à la
place des noms de table étrangères en tant que nom de colonne.

``UNIQUE``
..........

La contrainte ``UNIQUE`` permet maintenant de gérer automatiquement les champs
uniques. Il n'est plus nécessaire de surcharger la méthode ``verifier`` des
modèles pour gérer ce type de champ. Il faudra nettoyer les surcharges de
``verifier`` en supprimant la vérification manuelle des champs requis et les
remplacer par des contraintes ``UNIQUE`` dans la base de données.

``NOT NULL``
............

Toutes les colonnes ``NOT NULL`` généreront des champs requis. Des champs
qui n'étaient pas requis dans la version 4.2.0 peuvent donc l'être dans la
version 4.3.0 après une génération. Il faut donc supprimer la contrainte
``NOT NULL`` des colonnes qui ne sont pas réellement requises par l'application
ou ajouter une valeur par defaut avec la clause ``DEFAULT``.

Concernant les champs requis par l'application. Il n'est plus nécessaire de
surcharger la méthode ``verifier`` des modèles pour gérer ce type de champ. Il
faudra nettoyer les surcharges de ``verifier`` en supprimant la vérification
manuelle des champs requis et les remplacer par des contraintes ``NOT NULL``
sans clause ``DEFAULT`` dans la base de données.
